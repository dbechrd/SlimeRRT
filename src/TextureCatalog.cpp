#include "TextureCatalog.hpp"
#include "Globals.hpp"
#include <iostream>
#include <cassert>

namespace TexID {
    const std::string TextBackground = "resources/text-background.png";
    const std::string Grass          = "resources/grass2.jpg";
    const std::string Player         = "resources/charlie.png";
    const std::string Items          = "resources/items.png";
}

// TODO: Load bank from a file? Segment by level/area?
void TextureCatalog::LoadDefaultBank()
{
    // Load textures
    Load(TexID::TextBackground);
    Load(TexID::Grass         , TextureCatalog::Repeat);
    Load(TexID::Player        );
    Load(TexID::Items         );
}

bool TextureCatalog::onLoad(sf::Texture &texture, std::string path, int flags)
{
    texture.setRepeated(flags & Repeat);
    if (!texture.loadFromFile(path)) {
        std::cerr << "Failed to load texture [path: '" << path << "'], falling back on hard-coded MISSING.PNG" << std::endl;
        LoadMissingPng(texture);
        return false;
    }
    return true;
}

sf::Texture &TextureCatalog::onMissing(std::string path)
{
    assert(!"TextureCatalog::onMissing: Indexing based on invalid id");
    static sf::Texture missingPng;
    LoadMissingPng(missingPng);
    return missingPng;
}

void TextureCatalog::LoadMissingPng(sf::Texture &texture)
{
    if (!texture.loadFromMemory(MISSING_PNG, ARRAY_COUNT(MISSING_PNG))) {
        std::cerr << "Failed to load MISSING.PNG from memory.. we're doomed. What is life?" << std::endl;
        assert(!"Failed to load MISSING.PNG from memory.. how?");
        exit(EXIT_FAILURE);
    }
}

// NOTE: Generated with `xxd -i <filename>`
const unsigned char TextureCatalog::MISSING_PNG[153] = {
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x04, 0x03, 0x00, 0x00, 0x00, 0x81, 0x54, 0x67, 0xc7, 0x00, 0x00, 0x00,
    0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xae, 0xce, 0x1c, 0xe9, 0x00, 0x00,
    0x00, 0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc,
    0x61, 0x05, 0x00, 0x00, 0x00, 0x06, 0x50, 0x4c, 0x54, 0x45, 0xff, 0x00,
    0xff, 0xff, 0xff, 0xff, 0x9f, 0x18, 0x32, 0xe0, 0x00, 0x00, 0x00, 0x09,
    0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0e, 0xc3, 0x00, 0x00, 0x0e, 0xc3,
    0x01, 0xc7, 0x6f, 0xa8, 0x64, 0x00, 0x00, 0x00, 0x1c, 0x49, 0x44, 0x41,
    0x54, 0x28, 0xcf, 0x63, 0x00, 0x01, 0x41, 0x20, 0x40, 0xa6, 0x07, 0x42,
    0x60, 0x30, 0xb8, 0x01, 0x06, 0x46, 0xc3, 0x03, 0x4a, 0x33, 0x30, 0x00,
    0x00, 0x13, 0x2e, 0x11, 0x01, 0x46, 0x11, 0x64, 0x49, 0x00, 0x00, 0x00,
    0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};