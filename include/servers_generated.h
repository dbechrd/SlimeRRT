// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVERS_DB_H_
#define FLATBUFFERS_GENERATED_SERVERS_DB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace DB {

struct Server;
struct ServerBuilder;

struct ServerDB;
struct ServerDBBuilder;

struct Server FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ServerBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DB.Server";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DISPLAY_NAME = 4,
    VT_HOSTNAME = 6,
    VT_PORT = 8,
    VT_USER = 10,
    VT_PASS = 12
  };
  const flatbuffers::String *display_name() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLAY_NAME);
  }
  flatbuffers::String *mutable_display_name() {
    return GetPointer<flatbuffers::String *>(VT_DISPLAY_NAME);
  }
  bool KeyCompareLessThan(const Server *o) const {
    return *display_name() < *o->display_name();
  }
  int KeyCompareWithValue(const char *_display_name) const {
    return strcmp(display_name()->c_str(), _display_name);
  }
  const flatbuffers::String *hostname() const {
    return GetPointer<const flatbuffers::String *>(VT_HOSTNAME);
  }
  flatbuffers::String *mutable_hostname() {
    return GetPointer<flatbuffers::String *>(VT_HOSTNAME);
  }
  uint16_t port() const {
    return GetField<uint16_t>(VT_PORT, 0);
  }
  bool mutate_port(uint16_t _port = 0) {
    return SetField<uint16_t>(VT_PORT, _port, 0);
  }
  const flatbuffers::String *user() const {
    return GetPointer<const flatbuffers::String *>(VT_USER);
  }
  flatbuffers::String *mutable_user() {
    return GetPointer<flatbuffers::String *>(VT_USER);
  }
  const flatbuffers::String *pass() const {
    return GetPointer<const flatbuffers::String *>(VT_PASS);
  }
  flatbuffers::String *mutable_pass() {
    return GetPointer<flatbuffers::String *>(VT_PASS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_DISPLAY_NAME) &&
           verifier.VerifyString(display_name()) &&
           VerifyOffset(verifier, VT_HOSTNAME) &&
           verifier.VerifyString(hostname()) &&
           VerifyField<uint16_t>(verifier, VT_PORT, 2) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyString(user()) &&
           VerifyOffset(verifier, VT_PASS) &&
           verifier.VerifyString(pass()) &&
           verifier.EndTable();
  }
};

struct ServerBuilder {
  typedef Server Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_display_name(flatbuffers::Offset<flatbuffers::String> display_name) {
    fbb_.AddOffset(Server::VT_DISPLAY_NAME, display_name);
  }
  void add_hostname(flatbuffers::Offset<flatbuffers::String> hostname) {
    fbb_.AddOffset(Server::VT_HOSTNAME, hostname);
  }
  void add_port(uint16_t port) {
    fbb_.AddElement<uint16_t>(Server::VT_PORT, port, 0);
  }
  void add_user(flatbuffers::Offset<flatbuffers::String> user) {
    fbb_.AddOffset(Server::VT_USER, user);
  }
  void add_pass(flatbuffers::Offset<flatbuffers::String> pass) {
    fbb_.AddOffset(Server::VT_PASS, pass);
  }
  explicit ServerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Server> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Server>(end);
    fbb_.Required(o, Server::VT_DISPLAY_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Server> CreateServer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> display_name = 0,
    flatbuffers::Offset<flatbuffers::String> hostname = 0,
    uint16_t port = 0,
    flatbuffers::Offset<flatbuffers::String> user = 0,
    flatbuffers::Offset<flatbuffers::String> pass = 0) {
  ServerBuilder builder_(_fbb);
  builder_.add_pass(pass);
  builder_.add_user(user);
  builder_.add_hostname(hostname);
  builder_.add_display_name(display_name);
  builder_.add_port(port);
  return builder_.Finish();
}

inline flatbuffers::Offset<Server> CreateServerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *display_name = nullptr,
    const char *hostname = nullptr,
    uint16_t port = 0,
    const char *user = nullptr,
    const char *pass = nullptr) {
  auto display_name__ = display_name ? _fbb.CreateString(display_name) : 0;
  auto hostname__ = hostname ? _fbb.CreateString(hostname) : 0;
  auto user__ = user ? _fbb.CreateString(user) : 0;
  auto pass__ = pass ? _fbb.CreateString(pass) : 0;
  return DB::CreateServer(
      _fbb,
      display_name__,
      hostname__,
      port,
      user__,
      pass__);
}

struct ServerDB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ServerDBBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DB.ServerDB";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SERVERS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<DB::Server>> *servers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DB::Server>> *>(VT_SERVERS);
  }
  flatbuffers::Vector<flatbuffers::Offset<DB::Server>> *mutable_servers() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<DB::Server>> *>(VT_SERVERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SERVERS) &&
           verifier.VerifyVector(servers()) &&
           verifier.VerifyVectorOfTables(servers()) &&
           verifier.EndTable();
  }
};

struct ServerDBBuilder {
  typedef ServerDB Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_servers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DB::Server>>> servers) {
    fbb_.AddOffset(ServerDB::VT_SERVERS, servers);
  }
  explicit ServerDBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ServerDB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ServerDB>(end);
    return o;
  }
};

inline flatbuffers::Offset<ServerDB> CreateServerDB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DB::Server>>> servers = 0) {
  ServerDBBuilder builder_(_fbb);
  builder_.add_servers(servers);
  return builder_.Finish();
}

inline flatbuffers::Offset<ServerDB> CreateServerDBDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<flatbuffers::Offset<DB::Server>> *servers = nullptr) {
  auto servers__ = servers ? _fbb.CreateVectorOfSortedTables<DB::Server>(servers) : 0;
  return DB::CreateServerDB(
      _fbb,
      servers__);
}

inline const DB::ServerDB *GetServerDB(const void *buf) {
  return flatbuffers::GetRoot<DB::ServerDB>(buf);
}

inline const DB::ServerDB *GetSizePrefixedServerDB(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DB::ServerDB>(buf);
}

inline ServerDB *GetMutableServerDB(void *buf) {
  return flatbuffers::GetMutableRoot<ServerDB>(buf);
}

inline DB::ServerDB *GetMutableSizePrefixedServerDB(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<DB::ServerDB>(buf);
}

inline const char *ServerDBIdentifier() {
  return "SERV";
}

inline bool ServerDBBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ServerDBIdentifier());
}

inline bool SizePrefixedServerDBBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ServerDBIdentifier(), true);
}

inline bool VerifyServerDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DB::ServerDB>(ServerDBIdentifier());
}

inline bool VerifySizePrefixedServerDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DB::ServerDB>(ServerDBIdentifier());
}

inline const char *ServerDBExtension() {
  return "svr";
}

inline void FinishServerDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DB::ServerDB> root) {
  fbb.Finish(root, ServerDBIdentifier());
}

inline void FinishSizePrefixedServerDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DB::ServerDB> root) {
  fbb.FinishSizePrefixed(root, ServerDBIdentifier());
}

}  // namespace DB

#endif  // FLATBUFFERS_GENERATED_SERVERS_DB_H_
