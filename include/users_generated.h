// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USERS_DB_H_
#define FLATBUFFERS_GENERATED_USERS_DB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace DB {

struct User;
struct UserBuilder;

struct UserDB;
struct UserDBBuilder;

struct User FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DB.User";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_PASSWORD = 6
  };
  const flatbuffers::String *username() const {
    return GetPointer<const flatbuffers::String *>(VT_USERNAME);
  }
  flatbuffers::String *mutable_username() {
    return GetPointer<flatbuffers::String *>(VT_USERNAME);
  }
  bool KeyCompareLessThan(const User *o) const {
    return *username() < *o->username();
  }
  int KeyCompareWithValue(const char *_username) const {
    return strcmp(username()->c_str(), _username);
  }
  const flatbuffers::String *password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  flatbuffers::String *mutable_password() {
    return GetPointer<flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct UserBuilder {
  typedef User Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_username(flatbuffers::Offset<flatbuffers::String> username) {
    fbb_.AddOffset(User::VT_USERNAME, username);
  }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) {
    fbb_.AddOffset(User::VT_PASSWORD, password);
  }
  explicit UserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<User> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<User>(end);
    fbb_.Required(o, User::VT_USERNAME);
    return o;
  }
};

inline flatbuffers::Offset<User> CreateUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> username = 0,
    flatbuffers::Offset<flatbuffers::String> password = 0) {
  UserBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_username(username);
  return builder_.Finish();
}

inline flatbuffers::Offset<User> CreateUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *password = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return DB::CreateUser(
      _fbb,
      username__,
      password__);
}

struct UserDB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserDBBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DB.UserDB";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<DB::User>> *accounts() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DB::User>> *>(VT_ACCOUNTS);
  }
  flatbuffers::Vector<flatbuffers::Offset<DB::User>> *mutable_accounts() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<DB::User>> *>(VT_ACCOUNTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCOUNTS) &&
           verifier.VerifyVector(accounts()) &&
           verifier.VerifyVectorOfTables(accounts()) &&
           verifier.EndTable();
  }
};

struct UserDBBuilder {
  typedef UserDB Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_accounts(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DB::User>>> accounts) {
    fbb_.AddOffset(UserDB::VT_ACCOUNTS, accounts);
  }
  explicit UserDBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UserDB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UserDB>(end);
    return o;
  }
};

inline flatbuffers::Offset<UserDB> CreateUserDB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DB::User>>> accounts = 0) {
  UserDBBuilder builder_(_fbb);
  builder_.add_accounts(accounts);
  return builder_.Finish();
}

inline flatbuffers::Offset<UserDB> CreateUserDBDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<flatbuffers::Offset<DB::User>> *accounts = nullptr) {
  auto accounts__ = accounts ? _fbb.CreateVectorOfSortedTables<DB::User>(accounts) : 0;
  return DB::CreateUserDB(
      _fbb,
      accounts__);
}

inline const DB::UserDB *GetUserDB(const void *buf) {
  return flatbuffers::GetRoot<DB::UserDB>(buf);
}

inline const DB::UserDB *GetSizePrefixedUserDB(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DB::UserDB>(buf);
}

inline UserDB *GetMutableUserDB(void *buf) {
  return flatbuffers::GetMutableRoot<UserDB>(buf);
}

inline DB::UserDB *GetMutableSizePrefixedUserDB(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<DB::UserDB>(buf);
}

inline const char *UserDBIdentifier() {
  return "USER";
}

inline bool UserDBBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, UserDBIdentifier());
}

inline bool SizePrefixedUserDBBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, UserDBIdentifier(), true);
}

inline bool VerifyUserDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DB::UserDB>(UserDBIdentifier());
}

inline bool VerifySizePrefixedUserDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DB::UserDB>(UserDBIdentifier());
}

inline const char *UserDBExtension() {
  return "usr";
}

inline void FinishUserDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DB::UserDB> root) {
  fbb.Finish(root, UserDBIdentifier());
}

inline void FinishSizePrefixedUserDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DB::UserDB> root) {
  fbb.FinishSizePrefixed(root, UserDBIdentifier());
}

}  // namespace DB

#endif  // FLATBUFFERS_GENERATED_USERS_DB_H_
