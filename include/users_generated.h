// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USERS_SLIME_H_
#define FLATBUFFERS_GENERATED_USERS_SLIME_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace Slime {

struct UserAccount;
struct UserAccountBuilder;

struct Users;
struct UsersBuilder;

inline const flatbuffers::TypeTable *UserAccountTypeTable();

inline const flatbuffers::TypeTable *UsersTypeTable();

struct UserAccount FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserAccountBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return UserAccountTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Slime.UserAccount";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_PASSWORD = 6
  };
  const flatbuffers::String *username() const {
    return GetPointer<const flatbuffers::String *>(VT_USERNAME);
  }
  flatbuffers::String *mutable_username() {
    return GetPointer<flatbuffers::String *>(VT_USERNAME);
  }
  bool KeyCompareLessThan(const UserAccount *o) const {
    return *username() < *o->username();
  }
  int KeyCompareWithValue(const char *_username) const {
    return strcmp(username()->c_str(), _username);
  }
  const flatbuffers::String *password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  flatbuffers::String *mutable_password() {
    return GetPointer<flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct UserAccountBuilder {
  typedef UserAccount Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_username(flatbuffers::Offset<flatbuffers::String> username) {
    fbb_.AddOffset(UserAccount::VT_USERNAME, username);
  }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) {
    fbb_.AddOffset(UserAccount::VT_PASSWORD, password);
  }
  explicit UserAccountBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UserAccount> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UserAccount>(end);
    fbb_.Required(o, UserAccount::VT_USERNAME);
    return o;
  }
};

inline flatbuffers::Offset<UserAccount> CreateUserAccount(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> username = 0,
    flatbuffers::Offset<flatbuffers::String> password = 0) {
  UserAccountBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_username(username);
  return builder_.Finish();
}

inline flatbuffers::Offset<UserAccount> CreateUserAccountDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *password = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return Slime::CreateUserAccount(
      _fbb,
      username__,
      password__);
}

struct Users FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UsersBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return UsersTypeTable();
  }
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Slime.Users";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Slime::UserAccount>> *accounts() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Slime::UserAccount>> *>(VT_ACCOUNTS);
  }
  flatbuffers::Vector<flatbuffers::Offset<Slime::UserAccount>> *mutable_accounts() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Slime::UserAccount>> *>(VT_ACCOUNTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCOUNTS) &&
           verifier.VerifyVector(accounts()) &&
           verifier.VerifyVectorOfTables(accounts()) &&
           verifier.EndTable();
  }
};

struct UsersBuilder {
  typedef Users Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_accounts(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Slime::UserAccount>>> accounts) {
    fbb_.AddOffset(Users::VT_ACCOUNTS, accounts);
  }
  explicit UsersBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Users> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Users>(end);
    return o;
  }
};

inline flatbuffers::Offset<Users> CreateUsers(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Slime::UserAccount>>> accounts = 0) {
  UsersBuilder builder_(_fbb);
  builder_.add_accounts(accounts);
  return builder_.Finish();
}

inline flatbuffers::Offset<Users> CreateUsersDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<flatbuffers::Offset<Slime::UserAccount>> *accounts = nullptr) {
  auto accounts__ = accounts ? _fbb.CreateVectorOfSortedTables<Slime::UserAccount>(accounts) : 0;
  return Slime::CreateUsers(
      _fbb,
      accounts__);
}

inline const flatbuffers::TypeTable *UserAccountTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "username",
    "password"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *UsersTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Slime::UserAccountTypeTable
  };
  static const char * const names[] = {
    "accounts"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const Slime::Users *GetUsers(const void *buf) {
  return flatbuffers::GetRoot<Slime::Users>(buf);
}

inline const Slime::Users *GetSizePrefixedUsers(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Slime::Users>(buf);
}

inline Users *GetMutableUsers(void *buf) {
  return flatbuffers::GetMutableRoot<Users>(buf);
}

inline Slime::Users *GetMutableSizePrefixedUsers(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<Slime::Users>(buf);
}

inline const char *UsersIdentifier() {
  return "USER";
}

inline bool UsersBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, UsersIdentifier());
}

inline bool SizePrefixedUsersBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, UsersIdentifier(), true);
}

inline bool VerifyUsersBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Slime::Users>(UsersIdentifier());
}

inline bool VerifySizePrefixedUsersBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Slime::Users>(UsersIdentifier());
}

inline const char *UsersExtension() {
  return "usr";
}

inline void FinishUsersBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Slime::Users> root) {
  fbb.Finish(root, UsersIdentifier());
}

inline void FinishSizePrefixedUsersBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Slime::Users> root) {
  fbb.FinishSizePrefixed(root, UsersIdentifier());
}

}  // namespace Slime

#endif  // FLATBUFFERS_GENERATED_USERS_SLIME_H_
