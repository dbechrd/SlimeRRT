// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ITEMS_DB_H_
#define FLATBUFFERS_GENERATED_ITEMS_DB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

#include "item_affix_generated.h"
#include "item_class_generated.h"
#include "item_type_generated.h"

namespace DB {

struct Item;
struct ItemBuilder;
struct ItemT;

struct ItemDB;
struct ItemDBBuilder;
struct ItemDBT;

struct ItemT : public flatbuffers::NativeTable {
  typedef Item TableType;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DB.ItemT";
  }
  uint32_t uid = 0;
  ItemType item_type = ItemType_empty;
  std::vector<std::unique_ptr<ItemAffixT>> affixes{};
  ItemT() = default;
  ItemT(const ItemT &o);
  ItemT(ItemT&&) FLATBUFFERS_NOEXCEPT = default;
  ItemT &operator=(ItemT o) FLATBUFFERS_NOEXCEPT;
};

struct Item FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ItemT NativeTableType;
  typedef ItemBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DB.Item";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_ITEM_TYPE = 6,
    VT_AFFIXES = 8
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool mutate_uid(uint32_t _uid = 0) {
    return SetField<uint32_t>(VT_UID, _uid, 0);
  }
  bool KeyCompareLessThan(const Item *o) const {
    return uid() < o->uid();
  }
  int KeyCompareWithValue(uint32_t _uid) const {
    return static_cast<int>(uid() > _uid) - static_cast<int>(uid() < _uid);
  }
  ItemType item_type() const {
    return static_cast<ItemType>(GetField<uint16_t>(VT_ITEM_TYPE, 0));
  }
  bool mutate_item_type(ItemType _item_type = static_cast<ItemType>(0)) {
    return SetField<uint16_t>(VT_ITEM_TYPE, static_cast<uint16_t>(_item_type), 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ItemAffix>> *affixes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ItemAffix>> *>(VT_AFFIXES);
  }
  flatbuffers::Vector<flatbuffers::Offset<ItemAffix>> *mutable_affixes() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<ItemAffix>> *>(VT_AFFIXES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID, 4) &&
           VerifyField<uint16_t>(verifier, VT_ITEM_TYPE, 2) &&
           VerifyOffset(verifier, VT_AFFIXES) &&
           verifier.VerifyVector(affixes()) &&
           verifier.VerifyVectorOfTables(affixes()) &&
           verifier.EndTable();
  }
  ItemT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ItemT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Item> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ItemT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ItemBuilder {
  typedef Item Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(Item::VT_UID, uid, 0);
  }
  void add_item_type(ItemType item_type) {
    fbb_.AddElement<uint16_t>(Item::VT_ITEM_TYPE, static_cast<uint16_t>(item_type), 0);
  }
  void add_affixes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ItemAffix>>> affixes) {
    fbb_.AddOffset(Item::VT_AFFIXES, affixes);
  }
  explicit ItemBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Item> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Item>(end);
    return o;
  }
};

inline flatbuffers::Offset<Item> CreateItem(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    ItemType item_type = ItemType_empty,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ItemAffix>>> affixes = 0) {
  ItemBuilder builder_(_fbb);
  builder_.add_affixes(affixes);
  builder_.add_uid(uid);
  builder_.add_item_type(item_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Item> CreateItemDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0,
    ItemType item_type = ItemType_empty,
    const std::vector<flatbuffers::Offset<ItemAffix>> *affixes = nullptr) {
  auto affixes__ = affixes ? _fbb.CreateVector<flatbuffers::Offset<ItemAffix>>(*affixes) : 0;
  return DB::CreateItem(
      _fbb,
      uid,
      item_type,
      affixes__);
}

flatbuffers::Offset<Item> CreateItem(flatbuffers::FlatBufferBuilder &_fbb, const ItemT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ItemDBT : public flatbuffers::NativeTable {
  typedef ItemDB TableType;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DB.ItemDBT";
  }
  std::vector<std::unique_ptr<DB::ItemT>> items{};
  ItemDBT() = default;
  ItemDBT(const ItemDBT &o);
  ItemDBT(ItemDBT&&) FLATBUFFERS_NOEXCEPT = default;
  ItemDBT &operator=(ItemDBT o) FLATBUFFERS_NOEXCEPT;
};

struct ItemDB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ItemDBT NativeTableType;
  typedef ItemDBBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DB.ItemDB";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ITEMS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<DB::Item>> *items() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DB::Item>> *>(VT_ITEMS);
  }
  flatbuffers::Vector<flatbuffers::Offset<DB::Item>> *mutable_items() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<DB::Item>> *>(VT_ITEMS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ITEMS) &&
           verifier.VerifyVector(items()) &&
           verifier.VerifyVectorOfTables(items()) &&
           verifier.EndTable();
  }
  ItemDBT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ItemDBT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ItemDB> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ItemDBT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ItemDBBuilder {
  typedef ItemDB Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_items(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DB::Item>>> items) {
    fbb_.AddOffset(ItemDB::VT_ITEMS, items);
  }
  explicit ItemDBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ItemDB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ItemDB>(end);
    return o;
  }
};

inline flatbuffers::Offset<ItemDB> CreateItemDB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DB::Item>>> items = 0) {
  ItemDBBuilder builder_(_fbb);
  builder_.add_items(items);
  return builder_.Finish();
}

inline flatbuffers::Offset<ItemDB> CreateItemDBDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<flatbuffers::Offset<DB::Item>> *items = nullptr) {
  auto items__ = items ? _fbb.CreateVectorOfSortedTables<DB::Item>(items) : 0;
  return DB::CreateItemDB(
      _fbb,
      items__);
}

flatbuffers::Offset<ItemDB> CreateItemDB(flatbuffers::FlatBufferBuilder &_fbb, const ItemDBT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ItemT::ItemT(const ItemT &o)
      : uid(o.uid),
        item_type(o.item_type) {
  affixes.reserve(o.affixes.size());
  for (const auto &affixes_ : o.affixes) { affixes.emplace_back((affixes_) ? new ItemAffixT(*affixes_) : nullptr); }
}

inline ItemT &ItemT::operator=(ItemT o) FLATBUFFERS_NOEXCEPT {
  std::swap(uid, o.uid);
  std::swap(item_type, o.item_type);
  std::swap(affixes, o.affixes);
  return *this;
}

inline ItemT *Item::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ItemT>(new ItemT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Item::UnPackTo(ItemT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = uid(); _o->uid = _e; }
  { auto _e = item_type(); _o->item_type = _e; }
  { auto _e = affixes(); if (_e) { _o->affixes.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->affixes[_i]) { _e->Get(_i)->UnPackTo(_o->affixes[_i].get(), _resolver); } else { _o->affixes[_i] = std::unique_ptr<ItemAffixT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->affixes.resize(0); } }
}

inline flatbuffers::Offset<Item> Item::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ItemT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateItem(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Item> CreateItem(flatbuffers::FlatBufferBuilder &_fbb, const ItemT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ItemT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _uid = _o->uid;
  auto _item_type = _o->item_type;
  auto _affixes = _o->affixes.size() ? _fbb.CreateVector<flatbuffers::Offset<ItemAffix>> (_o->affixes.size(), [](size_t i, _VectorArgs *__va) { return CreateItemAffix(*__va->__fbb, __va->__o->affixes[i].get(), __va->__rehasher); }, &_va ) : 0;
  return DB::CreateItem(
      _fbb,
      _uid,
      _item_type,
      _affixes);
}

inline ItemDBT::ItemDBT(const ItemDBT &o) {
  items.reserve(o.items.size());
  for (const auto &items_ : o.items) { items.emplace_back((items_) ? new DB::ItemT(*items_) : nullptr); }
}

inline ItemDBT &ItemDBT::operator=(ItemDBT o) FLATBUFFERS_NOEXCEPT {
  std::swap(items, o.items);
  return *this;
}

inline ItemDBT *ItemDB::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ItemDBT>(new ItemDBT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ItemDB::UnPackTo(ItemDBT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = items(); if (_e) { _o->items.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->items[_i]) { _e->Get(_i)->UnPackTo(_o->items[_i].get(), _resolver); } else { _o->items[_i] = std::unique_ptr<DB::ItemT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->items.resize(0); } }
}

inline flatbuffers::Offset<ItemDB> ItemDB::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ItemDBT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateItemDB(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ItemDB> CreateItemDB(flatbuffers::FlatBufferBuilder &_fbb, const ItemDBT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ItemDBT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _items = _o->items.size() ? _fbb.CreateVector<flatbuffers::Offset<DB::Item>> (_o->items.size(), [](size_t i, _VectorArgs *__va) { return CreateItem(*__va->__fbb, __va->__o->items[i].get(), __va->__rehasher); }, &_va ) : 0;
  return DB::CreateItemDB(
      _fbb,
      _items);
}

inline const DB::ItemDB *GetItemDB(const void *buf) {
  return flatbuffers::GetRoot<DB::ItemDB>(buf);
}

inline const DB::ItemDB *GetSizePrefixedItemDB(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DB::ItemDB>(buf);
}

inline ItemDB *GetMutableItemDB(void *buf) {
  return flatbuffers::GetMutableRoot<ItemDB>(buf);
}

inline DB::ItemDB *GetMutableSizePrefixedItemDB(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<DB::ItemDB>(buf);
}

inline const char *ItemDBIdentifier() {
  return "ITEM";
}

inline bool ItemDBBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ItemDBIdentifier());
}

inline bool SizePrefixedItemDBBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ItemDBIdentifier(), true);
}

inline bool VerifyItemDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DB::ItemDB>(ItemDBIdentifier());
}

inline bool VerifySizePrefixedItemDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DB::ItemDB>(ItemDBIdentifier());
}

inline const char *ItemDBExtension() {
  return "itm";
}

inline void FinishItemDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DB::ItemDB> root) {
  fbb.Finish(root, ItemDBIdentifier());
}

inline void FinishSizePrefixedItemDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DB::ItemDB> root) {
  fbb.FinishSizePrefixed(root, ItemDBIdentifier());
}

inline std::unique_ptr<DB::ItemDBT> UnPackItemDB(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<DB::ItemDBT>(GetItemDB(buf)->UnPack(res));
}

inline std::unique_ptr<DB::ItemDBT> UnPackSizePrefixedItemDB(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<DB::ItemDBT>(GetSizePrefixedItemDB(buf)->UnPack(res));
}

}  // namespace DB

#endif  // FLATBUFFERS_GENERATED_ITEMS_DB_H_
